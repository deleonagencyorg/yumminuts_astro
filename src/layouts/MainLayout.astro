---
import Favicon from '../components/Favicon.astro';
// import GoogleTagManager from './i18n/GoogleTagManager.astro';
// import GoogleTagManagerNoScript from './i18n/GoogleTagManagerNoScript.astro';
import { type Locale } from '../i18n/i18n'; // t is not used, Locale type might be needed
import Header from '../components/common/Header/index.astro';
import Footer from '../components/common/Footer/index.astro';
import MobileMenu from '../components/common/MobileMenu/index.astro';
import I18nProvider from '../components/i18n/I18nProvider.astro';
import { routesConfig } from '../config/routes';
import { getHeaderColors } from '../config/headerColors';
import { ViewTransitions } from 'astro:transitions';
import "../styles/global.css";
import { head } from 'framer-motion/m';

export interface Props {
  title?: string;
  description?: string;
  class?: string;
  headerColors?: {
    backgroundColor?: string;
    textColor?: string;
  };
}

const { title, description, class: className, headerColors } = Astro.props;

// Determine language for <html lang=...> and for key prop from the URL
const pathSegments = Astro.url.pathname.split('/');
const langFromUrl = pathSegments[1] as Locale;
const validLocales: Locale[] = ['es', 'en'];
const currentLang = validLocales.includes(langFromUrl) ? langFromUrl : 'es'; // Default to 'es'
// Obtener configuración de colores basada en la ruta actual
const { pathname } = Astro.url;
const headerColorConfig = getHeaderColors(pathname);

// Si se pasan colores de header específicos (por ejemplo, desde un producto),
// crear una configuración personalizada. Soportar hex (#xxxxxx) como arbitrary value
// y clases tailwind directas como 'bg-white'.
let customHeaderConfig = headerColorConfig;
if (headerColors) {
  const bg = headerColors.backgroundColor || '';
  const resolvedBg = bg
    ? (bg.startsWith('#') ? `bg-[${bg}]` : bg)
    : headerColorConfig.backgroundColor;
  const txt = headerColors.textColor || headerColorConfig.textColor;
  customHeaderConfig = {
    ...headerColorConfig,
    backgroundColor: resolvedBg,
    textColor: txt,
  };
}
---
<html lang={currentLang}>
  <head>
    <Favicon />
    
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    {title && <title> Yummi Nuts -  {title}</title>}
    {description && <meta name="description" content={description} />}
    <ViewTransitions />
    <slot name="head" />
  
  <!-- Script para prevenir carga de URLs de imágenes incorrectas -->
  <script is:inline>
    // Interceptar requests de imágenes con URLs relativas problemáticas
    if ('serviceWorker' in navigator) {
      // Limpiar cualquier cache problemático al cargar la página
      if (window.caches) {
        caches.keys().then(function(cacheNames) {
          cacheNames.forEach(function(cacheName) {
            if (cacheName.includes('image') || cacheName.includes('asset')) {
              caches.delete(cacheName);
            }
          });
        });
      }
    }
    
    // Prevenir navegación a URLs de imágenes
    document.addEventListener('DOMContentLoaded', function() {
      // Interceptar clicks en elementos que puedan tener URLs de imagen incorrectas
      document.addEventListener('click', function(e) {
        const href = e.target.href || (e.target.closest('a') && e.target.closest('a').href);
        if (href && href.includes('.webp') && !href.startsWith('http')) {
          e.preventDefault();
          e.stopPropagation();
          return false;
        }
      });
    });
  </script>
  </head>
  <body class={`font-sans ${className || ''}`}>
    <!-- Google Tag Manager (noscript) -->
  <noscript>
  <iframe
    src="https://www.googletagmanager.com/ns.html?id=GTM-T82M4TL"
    height="0" width="0" style="display:none;visibility:hidden">
  </iframe>
</noscript>
    <!-- End Google Tag Manager (noscript) -->
    {/* <GoogleTagManagerNoScript /> */}
    <I18nProvider>
      <slot name="header">
        <Header currentLang={currentLang} headerColors={headerColors} />
      </slot>
      <main transition:animate="slide">
        <slot />
      </main>
      <Footer currentLang={currentLang} />
    </I18nProvider>
    
    <!-- Menú móvil al final del body para máximo z-index -->
    <MobileMenu currentLang={currentLang} headerColorConfig={customHeaderConfig} />

    <!-- Global reveal-on-scroll animation script -->
    <script is:inline>
      (function(){
        const cls = 'reveal-on-scroll';
        const visible = 'is-visible';
        const root = document;
        function init(){
          const items = Array.from(root.querySelectorAll('.' + cls));
          if (!('IntersectionObserver' in window)) {
            items.forEach(el => el.classList.add(visible));
            return;
          }
          const io = new IntersectionObserver((entries)=>{
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add(visible);
                io.unobserve(entry.target);
              }
            });
          }, { threshold: 0.15 });
          items.forEach(el => io.observe(el));
        }
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', init);
        } else {
          init();
        }
        document.addEventListener('astro:page-load', init);
        document.addEventListener('astro:after-swap', init);
      })();
    </script>
    <style is:global>
      .reveal-on-scroll { opacity: 0; transform: translateY(18px); transition: opacity .6s ease, transform .6s ease; }
      .reveal-on-scroll.is-visible { opacity: 1; transform: translateY(0); }
    </style>
  </body>
</html>
