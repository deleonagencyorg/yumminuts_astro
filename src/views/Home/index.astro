---
import LazyImage from '../../components/common/LazyImage.astro';
// Component Imports
import Carousel from '../../components/common/Carousel/index.astro';
import RecipesCarousel from "../../components/recipes/RecipesCarousel.astro";
import HealthInfoSection from '../../components/common/HealthInfoSection.astro';
import Categories from '../../components/common/Categories/index.astro';
import Discover from '../../components/common/Discover/index.astro';

// Style Imports
import './styles.css';

// i18n and Data Imports
import { t, getLocale } from '../../i18n/i18n';
import categoriesConfig from '../../config/categories.json';



// Props
export interface Props {
  loading?: boolean;
}
const { loading = false } = Astro.props;

// Language and Data Setup
const currentLang = getLocale();
const homeAssets = t('home', { namespace: 'common', locale: currentLang }) || {};
const recipesAssets = t('', { namespace: 'recipes', locale: currentLang }) || {};
const galleryAssets = t('', { namespace: 'gallery', locale: currentLang }) || {};
const aboutAssets = t('', { namespace: 'aboutus', locale: currentLang }) || {};
const newsAssets =  t('', { namespace: 'news', locale: currentLang }) || {};
const products = t('items', { namespace: 'products', locale: currentLang }) || [];

// Build first product per category using centralized categories config
type CatProduct = { id: string; title: string; image: string; bgColor: string; slug?: string };
function normalizeCategory(value: string): string {
  const v = (value || '').toLowerCase();
  if (!v) return '';
  // Map by keywords to our keys
  if (v.includes('maní') || v.includes('mani') || v.includes('peanut')) return 'manies';
  if (v.includes('marañ') || v.includes('maranon') || v.includes('cashew')) return 'maranones';
  if (v.includes('semilla') || v.includes('seed') || v.includes('almend') || v.includes('mix')) return 'semillas';
  // Try direct match with labels from config
  const cfg = (categoriesConfig as any).categories || [];
  const match = cfg.find((c: any) => [c.labels?.es, c.labels?.en, c.key].map((s: string) => (s||'').toLowerCase()).includes(v));
  return match?.key || '';
}

const productsByCategory: Record<string, any[]> = {};
for (const p of products as any[]) {
  const key = normalizeCategory((p as any).category || (p as any).title || (p as any).name || '');
  if (!key) continue;
  if (!productsByCategory[key]) productsByCategory[key] = [];
  productsByCategory[key].push(p);
}

const categoryCards: CatProduct[] = ((categoriesConfig as any).categories || []).map((c: any) => {
  const list = productsByCategory[c.key] || [];
  const first = list[0] || {};
  // Always show the category label (ES/EN) below the image, not the product name
  const title = (c.labels?.[currentLang] || c.labels?.es || c.labels?.en || '') as string;
  const image = (first.image || '') as string;
  // Use category config color to paint SVG, independent of product
  const bgColor = (c.background || '#95CFF2') as string;
  const id = (first.id || c.key) as string;
  const slug = (first.slug || first.id || '') as string;
  return { id, title, image, bgColor, slug };
}).filter((cp: CatProduct) => cp.image && cp.bgColor);

const commonAssets = t('assets.slider', { namespace: 'common', locale: currentLang }) || [];
const slides = Array.isArray(commonAssets) 
  ? commonAssets
    .filter(asset => asset && typeof asset === 'object' && asset.desktop && asset.mobile)
    .map(asset => ({
      desktop: asset.desktop,
      mobile: asset.mobile,
      alt: asset.alt || "Yumminuts",
      title: asset.title || '',
      subtitle: asset.description || '',
      link: asset.url || asset.link || ''
    }))
  : [];

const discoverAssets = t('assets.discoverSection', { namespace: 'common', locale: currentLang }) || {};

// Load recipes via Vite glob (same strategy as Recipes page)
interface Recipe { id: string; title: string; image?: string; preparation_time: number; type?: string }
const recipeModules = import.meta.glob<{ default: Recipe }>("../../locales/*/recipes/*.json");
const allRecipes: Recipe[] = [];
for (const path in recipeModules) {
  const parts = path.split('/');
  const lang = parts[parts.length - 3];
  if (lang === currentLang) {
    const mod = await recipeModules[path]();
    allRecipes.push(mod.default);
  }
}
// Fallback: if there are no per-file recipes, use translations list if available
const itemsForCarousel: Recipe[] = allRecipes.length ? allRecipes : (recipesAssets.items || []);

---

  <main class="w-full flex flex-col items-center justify-center mt-0">
    <!-- Slider Section con máscara -->
    <div class="relative w-full overflow-hidden max-w-[100vw] h-auto aspect-[1/1] md:aspect-[21/9] lg:h-[66vh] reveal-on-scroll opacity-0 translate-y-6 transition-all duration-700 ease-out">
     

      <div class="relative z-0 w-full md:w-[100%] md:ml-auto md:h-full h-[72vh] md:flex md:items-center md:justify-center">
        <Carousel slides={slides} />
      </div>
    </div>
    
    <!-- Sección de Información -->
    <div class="w-full reveal-on-scroll opacity-0 translate-y-6 transition-all duration-700 ease-out">
      <HealthInfoSection />
    </div>

    <!-- Sección de Productos por Categoría -->
    {categoryCards.length > 0 && (
      <section class="container mx-auto px-4 py-4 bg-white pt-16 reveal-on-scroll opacity-0 translate-y-6 transition-all duration-700 ease-out">
        <div class="container mx-autxo px-4">
          <Categories 
            products={categoryCards}
            title={currentLang === 'es' ? 'Categorías' : 'Categories'}
          />
        </div>
      </section>
    )}

    <!-- Sección de video -->
    <section id="video" class="w-full  bg-pink reveal-on-scroll opacity-0 translate-y-6 transition-all duration-700 ease-out">
      <video height="100%" width="100%" muted playsinline preload="metadata" data-autoplay-on-view controlslist="nodownload noplaybackrate noremoteplayback nofullscreen" disablepictureinpicture>
        <source src="https://snack.yummiespromociones.com/yumminuts/yumminutsvideo.mp4" type="video/mp4">
      </video>
    </section>

    <!-- Sección de Recetas -->
    <section id="recipes" class="w-full py-12 reveal-on-scroll opacity-0 translate-y-6 transition-all duration-700 ease-out" transition:animate="slide">
      <div class="container mx-auto px-4 bg-white">
        {recipesAssets.home?.title && (
          <div class="text-left mb-16 relative z-20" >
            <h2 class="font-heading leading-none not-italic text-black text-4xl md:text-6xl tracking-tight text-left">
              {recipesAssets.home?.title}
            </h2>
            
          </div>
        )}
        <RecipesCarousel 
          title={recipesAssets.home?.title || 'Recetas'}
          textButton={recipesAssets.home?.view_more || 'Ver Todas'}
        />
      </div>
    </section>

    <!-- Sección Descubrenos -->
    <section id="discover" class="w-container mx-auto px-4 bg-white py-16 reveal-on-scroll opacity-0 translate-y-6 transition-all duration-700 ease-out">
      <Discover title={discoverAssets.title} images={discoverAssets.images || []} />
    </section>





    <style>
      /* Hide any native media controls UI if a browser tries to show them */
      #video video::-webkit-media-controls { display: none !important; }
      #video video::-webkit-media-controls-enclosure { display: none !important; }
      #video video::-moz-media-controls { display: none !important; }
    </style>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const revealElements = Array.from(document.querySelectorAll('.reveal-on-scroll'));

        const show = (el) => {
          el.classList.remove('opacity-0', 'translate-y-6');
          el.classList.add('opacity-100', 'translate-y-0');
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const el = entry.target;
              // Stagger children if present
              const children = el.querySelectorAll('[data-reveal-child]');
              if (children.length) {
                children.forEach((child, idx) => {
                  child.style.transitionDelay = `${Math.min(idx * 100, 600)}ms`;
                  child.classList.remove('opacity-0', 'translate-y-6');
                  child.classList.add('opacity-100', 'translate-y-0');
                });
              }
              show(el);
              observer.unobserve(el);
            }
          });
        }, { threshold: 0.15, rootMargin: '0px 0px -5% 0px' });

        revealElements.forEach((el) => observer.observe(el));

        // Auto-play/pause video when the section is in view
        const autoPlayVideos = Array.from(document.querySelectorAll('video[data-autoplay-on-view]'));
        if (autoPlayVideos.length) {
          const videoObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
              const vid = entry.target;
              if (!(vid instanceof HTMLVideoElement)) return;
              if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
                // Ensure muted for autoplay policies
                vid.muted = true;
                const playPromise = vid.play();
                if (playPromise && typeof playPromise.then === 'function') {
                  playPromise.catch(() => {/* swallow autoplay rejection */});
                }
              } else {
                vid.pause();
              }
            });
          }, { threshold: [0, 0.5, 1] });

          autoPlayVideos.forEach((v) => videoObserver.observe(v));
        }
      });
    </script>
  </main>
