---
// Hybrid component combining Categories products display with Recipe-style filtering
import { t } from '../../../i18n/i18n';
import { getLocale } from '../../../i18n/i18n';
import ProductCard from '../ProductCard/index.astro';
import categoriesConfig from '../../../config/categories.json';

const currentLang = getLocale();
// Load all products from localized JSON
const products = t('items', { namespace: 'products', locale: currentLang }) || [];

export interface Props {
  title?: string;
  showAllProducts?: boolean;
}

const {
  title = currentLang === 'es' ? 'Nuestros Productos' : 'Our Products',
  showAllProducts = false
} = Astro.props;

// Use all localized products
const productItems = Array.isArray(products) ? products : [];

// Build filter categories from centralized config with localized labels
const filterCategories = (categoriesConfig.categories || []).map((c: any) => ({
  key: c.key,
  name: currentLang === 'es' ? c.labels.es : c.labels.en,
  icon: c.icon,
  background: c.background,
  slug: currentLang === 'es' ? c.slugs.es : c.slugs.en
}));

// Function to get category from product using categories config first
function getProductCategory(product: any): string {
  const cfg = (categoriesConfig as any).categories || [];
  const raw = String(product?.category || product?.title || product?.name || '').toLowerCase();
  // Try exact match against labels/slugs/keys
  for (const c of cfg) {
    const labels = [c?.labels?.es, c?.labels?.en].map((s: string) => String(s || '').toLowerCase());
    const slugs = [c?.slugs?.es, c?.slugs?.en].map((s: string) => String(s || '').toLowerCase());
    const key = String(c?.key || '').toLowerCase();
    if (labels.includes(raw) || slugs.includes(raw) || raw === key) return c.key;
  }
  // Heuristics (fallback)
  const title = String(product?.title || '').toLowerCase();
  const id = String(product?.id || '').toLowerCase();
  const slug = String(product?.slug || '').toLowerCase();
  const category = String(product?.category || '').toLowerCase();
  if (title.includes('mani') || title.includes('maní') || id.includes('mani') || slug.includes('mani') ||
      title.includes('peanut') || category.includes('peanut')) return 'manies';
  if (title.includes('maranon') || title.includes('marañón') || id.includes('maranon') || slug.includes('maranon') ||
      title.includes('cashew') || category.includes('cashew')) return 'maranones';
  if (title.includes('semilla') || id.includes('semilla') || title.includes('seed') || category.includes('seed') ||
      title.includes('almond') || category.includes('almond') || title.includes('mix') || id.includes('mix')) return 'semillas';
  // Ultimate fallback
  return (cfg[0]?.key) || 'manies';
}

// Display products (limit to 6 if not showing all)
const displayProducts = showAllProducts ? productItems : productItems.slice(0, 6);

function slugify(input: string): string {
  return (input || '')
    .normalize('NFD')
    .replace(/\p{Diacritic}/gu, '')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
}

function productHref(product: any): string {
  const lang = currentLang === 'es' ? 'es' : 'en';
  const seg = currentLang === 'es' ? 'productos' : 'products';
  const slug = product?.slug || product?.id || slugify(product?.title || product?.name || '');
  return `/${lang}/${seg}/${slug}`;
}

---

<div class="w-full py-12 bg-white">
  <div class="container mx-auto px-4">
    
    <!-- Title -->
    <div class="text-left mb-8">
      <h2 class="font-heading text-4xl md:text-5xl font-extrabold text-black tracking-[-2px] leading-tight">
        {title}
      </h2>
    </div>

    <!-- Filter Buttons -->
    <div class="flex flex-wrap gap-3 mb-8 justify-left" id="productsFilters">
      <button 
        type="button" 
        data-filter="all" 
        class="category-filter active px-6 py-3 rounded-lg font-medium text-sm md:text-base transition-all duration-300 whitespace-nowrap"
      >
        {currentLang === 'es' ? 'Todos los Productos' : 'All Products'}
      </button>
      {filterCategories.map((category) => (
        <button 
          type="button" 
          data-filter={category.key}
          class="category-filter px-6 py-3 rounded-lg font-medium text-sm md:text-base transition-all duration-300 whitespace-nowrap"
        >
          {category.name}
        </button>
      ))}
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-12" id="productsGrid">
      {displayProducts.map((product: any) => (
        <a href={productHref(product)} class="product-card group cursor-pointer block" data-category={getProductCategory(product)}>
          <ProductCard 
            title={product.title || product.name}
            image={product.image || '/images/products/placeholder.jpg'}
            bgColor={(product.background_color || product.color_button || product.header_color || (filterCategories.find(c => c.key === getProductCategory(product))?.background) || '#95CFF2')}
            description={product.description}
          />
        </a>
      ))}
    </div>

    <!-- No products message -->
    <div id="noProductsMessage" class="text-center py-12 hidden">
      <p class="text-gray-500 text-lg">{currentLang === 'es' ? 'No hay productos en esta categoría.' : 'No products in this category.'}</p>
    </div>

    <!-- Show All Button (if not showing all products) -->
    {!showAllProducts && productItems.length > 6 && (
      <div class="text-center mt-12">
        <a 
          href={`/${currentLang === 'es' ? 'es/productos' : 'en/products'}`}
          class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full transition-colors duration-300 text-lg"
        >
          {currentLang === 'es' ? 'Ver Todos los Productos' : 'See All Products'}
        </a>
      </div>
    )}
  </div>
</div>

<style>
/* Filter button styles */
.category-filter {
  background-color: #f3f4f6;
  color: #4b5563;
  border: 2px solid transparent;
}

.category-filter:hover:not(.active) {
  background-color: #e5e7eb;
  transform: translateY(-2px);
}

.category-filter.active {
  background-color: #3b82f6;
  color: white;
  border-color: #1d4ed8;
}

/* Product card animations */
.product-card {
  opacity: 1;
  transform: scale(1);
  transition: all 0.3s ease;
}

.product-card.hidden {
  opacity: 0;
  transform: scale(0.95);
  pointer-events: none;
}

/* Text clamp utility */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>

<script>
  function initProductsFilters() {
    const root = document.currentScript?.closest('.w-full')?.parentElement || document;
    const filterButtons = Array.from(root.querySelectorAll('.category-filter'));
    const productCards = Array.from(root.querySelectorAll('.product-card'));
    const noProductsMessage = root.querySelector('#noProductsMessage');

    if (!filterButtons.length || !productCards.length) return;

    function apply(category: string) {
      let visibleCount = 0;
      productCards.forEach((card) => {
        const productCategory = card.getAttribute('data-category');
        const shouldShow = category === 'all' || productCategory === category;
        card.classList.toggle('hidden', !shouldShow);
        if (shouldShow) visibleCount++;
      });
      if (noProductsMessage) {
        noProductsMessage.classList.toggle('hidden', visibleCount !== 0);
      }
    }

    filterButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-filter') || 'all';
        filterButtons.forEach((b) => b.classList.remove('active'));
        button.classList.add('active');
        apply(category);
      });
    });

    // Initial state
    apply('all');
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProductsFilters);
  } else {
    initProductsFilters();
  }
  document.addEventListener('astro:page-load', initProductsFilters);
  document.addEventListener('astro:after-swap', initProductsFilters);
</script>
