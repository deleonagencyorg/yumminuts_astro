---
// Hybrid component combining Categories products display with Recipe-style filtering
import { t } from '../../../i18n/i18n';
import { getLocale } from '../../../i18n/i18n';
import ProductCard from '../ProductCard/index.astro';

const currentLang = getLocale();
const brandsAssets = t('', { namespace: 'brands', locale: currentLang }) || {};
const brandsList = brandsAssets.brands || [];
const nutsBrand = brandsList.find((brand: any) => brand.id === 'yumminuts');
const nutsCategories = nutsBrand?.categories || [];
const nutsProducts = nutsBrand?.products || [];

export interface Props {
  title?: string;
  showAllProducts?: boolean;
}

const {
  title = 'Nuestros Productos Yumminuts',
  showAllProducts = false
} = Astro.props;

// Combine categories and products, or use products if categories are empty
const productItems = nutsCategories.length > 0 ? nutsCategories : nutsProducts;

// Define specific filter categories matching the yumminuts categories
const filterCategories = [
  { key: 'manies', name: 'Maní' },
  { key: 'semillas', name: 'Semillas' },
  { key: 'maranones', name: 'Marañón' }
];

// Function to get category from product
function getProductCategory(product: any): string {
  const title = (product.title || '').toLowerCase();
  const id = (product.id || '').toLowerCase();
  const slug = (product.slug || '').toLowerCase();
  
  // Check for maní/peanut related products
  if (title.includes('mani') || title.includes('maníes') || id.includes('mani') || slug.includes('mani')) {
    return 'manies';
  }
  
  // Check for marañón/cashew related products
  if (title.includes('maranon') || title.includes('marañón') || id.includes('maranon') || slug.includes('maranon')) {
    return 'maranones';
  }
  
  // Check for semillas/seeds/mix/almendras related products
  if (title.includes('semilla') || title.includes('seed') || title.includes('mix') || title.includes('almendra') || 
      id.includes('semilla') || id.includes('mix') || slug.includes('semilla')) {
    return 'semillas';
  }
  
  // Default based on category IDs from yumminuts structure
  if (id === 'manies' || slug === 'manies') return 'manies';
  if (id === 'semillas' || slug === 'semillas') return 'semillas';
  if (id === 'maranones' || slug === 'maranones') return 'maranones';
  
  // Fallback default
  return 'manies';
}

// Display products (limit to 6 if not showing all)
const displayProducts = showAllProducts ? productItems : productItems.slice(0, 6);

function slugify(input: string): string {
  return (input || '')
    .normalize('NFD')
    .replace(/\p{Diacritic}/gu, '')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
}

function productHref(product: any): string {
  const lang = currentLang === 'es' ? 'es' : 'en';
  const seg = currentLang === 'es' ? 'productos' : 'products';
  const slug = product?.slug || product?.id || slugify(product?.title || product?.name || '');
  return `/${lang}/${seg}/${slug}`;
}

---

<div class="w-full py-12 bg-white">
  <div class="container mx-auto px-4">
    
    <!-- Title -->
    <div class="text-left mb-8">
      <h2 class="font-sans text-4xl md:text-5xl font-extrabold text-black tracking-[-2px] leading-tight">
        {title}
      </h2>
    </div>

    <!-- Filter Buttons -->
    <div class="flex flex-wrap gap-3 mb-8 justify-left" id="productsFilters">
      <button 
        type="button" 
        data-filter="all" 
        class="category-filter active px-6 py-3 rounded-lg font-medium text-sm md:text-base transition-all duration-300 whitespace-nowrap"
      >
        Todos los Productos
      </button>
      {filterCategories.map((category) => (
        <button 
          type="button" 
          data-filter={category.key}
          class="category-filter px-6 py-3 rounded-lg font-medium text-sm md:text-base transition-all duration-300 whitespace-nowrap"
        >
          {category.name}
        </button>
      ))}
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-12" id="productsGrid">
      {displayProducts.map((product: any) => (
        <a href={productHref(product)} class="product-card group cursor-pointer block" data-category={getProductCategory(product)}>
          <ProductCard 
            title={product.title || product.name}
            image={product.image || '/images/products/placeholder.jpg'}
            bgImage={product.bgColor}
            description={product.description}
          />
        </a>
      ))}
    </div>

    <!-- No products message -->
    <div id="noProductsMessage" class="text-center py-12 hidden">
      <p class="text-gray-500 text-lg">No hay productos en esta categoría.</p>
    </div>

    <!-- Show All Button (if not showing all products) -->
    {!showAllProducts && productItems.length > 6 && (
      <div class="text-center mt-12">
        <a 
          href={`/${currentLang === 'es' ? 'es/productos' : 'en/products'}`}
          class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full transition-colors duration-300 text-lg"
        >
          Ver Todos los Productos
        </a>
      </div>
    )}
  </div>
</div>

<style>
/* Filter button styles */
.category-filter {
  background-color: #f3f4f6;
  color: #4b5563;
  border: 2px solid transparent;
}

.category-filter:hover:not(.active) {
  background-color: #e5e7eb;
  transform: translateY(-2px);
}

.category-filter.active {
  background-color: #3b82f6;
  color: white;
  border-color: #1d4ed8;
}

/* Product card animations */
.product-card {
  opacity: 1;
  transform: scale(1);
  transition: all 0.3s ease;
}

.product-card.hidden {
  opacity: 0;
  transform: scale(0.95);
  pointer-events: none;
}

/* Text clamp utility */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>

<script>
  // Product filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.category-filter');
    const productCards = document.querySelectorAll('.product-card');
    const noProductsMessage = document.getElementById('noProductsMessage');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Update active state of buttons
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        const category = button.getAttribute('data-filter');
        let visibleCount = 0;
        
        // Filter products with smooth animation
        productCards.forEach(card => {
          const productCategory = card.getAttribute('data-category');
          const shouldShow = category === 'all' || productCategory === category;
          
          if (shouldShow) {
            card.classList.remove('hidden');
            visibleCount++;
          } else {
            card.classList.add('hidden');
          }
        });
        
        // Show/hide no products message
        if (visibleCount === 0) {
          noProductsMessage?.classList.remove('hidden');
        } else {
          noProductsMessage?.classList.add('hidden');
        }
      });
    });

    // Fix for images that fail to load
    const images = document.querySelectorAll('.product-card [style*="background-image"]');
    images.forEach(imageDiv => {
      const img = new Image();
      const element = imageDiv as HTMLElement;
      const bgStyle = element.style.backgroundImage;
      const url = bgStyle.match(/url\(['"]?([^'"]+)['"]?\)/)?.[1];
      
      if (url) {
        img.onerror = function() {
          element.style.backgroundImage = "url('/images/products/placeholder.jpg')";
        };
        img.src = url;
      }
    });
  });
</script>
