---
import { getOptimalSizes, shouldPrioritize } from '../../utils/imageUtils';

interface Props {
  src?: string;
  alt: string;
  width?: string | number;
  height?: string | number;
  class?: string;
  color?: string;
  priority?: boolean;
  sizes?: string;
  context?: string;
  decorative?: boolean;
  [key: string]: any;
}

// Función para detectar si una URL es un SVG
function isSvgUrl(url: string): boolean {
  if (!url) return false;
  return url.toLowerCase().endsWith('.svg');
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className, 
  color, 
  context = 'default',
  priority: explicitPriority,
  sizes: explicitSizes,
  decorative = false,
  ...rest 
} = Astro.props;

// Si no hay src, no renderizar nada
if (!src) return null;

// Asegurar que las URLs relativas de imágenes se conviertan en absolutas
// para evitar que el navegador las trate como rutas de página
let processedSrc = src;
if (src && !src.startsWith('http') && !src.startsWith('/') && !src.startsWith('data:')) {
  // Si es una URL relativa sin protocolo ni slash inicial, convertir a absoluta
  processedSrc = `https://snack.yummiespromociones.com/yumminuts/${src}`;
}

// Optimizar el texto alternativo
let optimizedAlt = alt;

// Si la imagen es decorativa, usar alt vacío
if (decorative) {
  optimizedAlt = '';
} else if (alt) {
  optimizedAlt = alt
    .replace(/^imagen de\s+/i, '')
    .replace(/^foto de\s+/i, '')
    .replace(/^icono de\s+/i, '')
    .replace(/^imagen\s+/i, '')
    .replace(/^foto\s+/i, '')
    .replace(/^icono\s+/i, '');
}

// Determinar prioridad
const priority = explicitPriority !== undefined ? explicitPriority : shouldPrioritize(processedSrc, context);

// Obtener tamaños óptimos
const sizes = explicitSizes || getOptimalSizes(context);

// Determinar si es una imagen WebP
const isWebP = processedSrc.toLowerCase().endsWith('.webp');

// Función para calcular la rotación de matiz según el color
function getHueRotate(color: string) {
  // Si no hay color, devolver 0deg
  if (!color) return '0deg';
  
  // Valores aproximados para colores comunes
  const hueValues: Record<string, string> = {
    'red': '0deg',
    'orange': '35deg',
    'yellow': '60deg',
    'green': '120deg',
    'blue': '240deg',
    'purple': '270deg',
    'pink': '330deg',
    'white': '0deg',
    'black': '0deg',
    'primary': '0deg',
    'secondary': '0deg',
    'tertiary': '0deg',
    'quaternary': '0deg',
    'quinary': '0deg',
    'senary': '0deg',
    'septenary': '0deg',
    'octonary': '0deg',
    'nonary': '0deg',
    'decenary': '0deg',
  };
  
  // Verificar si es un color nombrado
  const namedColor = color.toLowerCase();
  if (hueValues[namedColor]) {
    return hueValues[namedColor];
  }
  
  // Verificar si es un color hexadecimal
  if (color.startsWith('#')) {
    // Convertir hex a RGB
    let hex = color.substring(1);
    
    // Normalizar formato (convertir #RGB a #RRGGBB)
    if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }
    
    // Verificar que sea un formato hexadecimal válido
    if (hex.length !== 6) {
      return '0deg';
    }
    
    // Convertir a RGB
    const r = parseInt(hex.substring(0, 2), 16) / 255;
    const g = parseInt(hex.substring(2, 4), 16) / 255;
    const b = parseInt(hex.substring(4, 6), 16) / 255;
    
    // Calcular HSL
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    
    if (max === min) {
      h = 0; // achromatic
    } else {
      const d = max - min;
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h = h * 60;
    }
    
    return `${h}deg`;
  }
  
  // Si no es un color reconocido, devolver 0deg
  return '0deg';
}

// Generar srcset para imágenes responsivas
const isExternal = processedSrc.startsWith('http');
let srcset = '';

if (isWebP) {
  if (isExternal && processedSrc.includes('assets.doguiygatibienestar.com')) {
    srcset = [
      `${processedSrc}?w=640 640w`,
      `${processedSrc}?w=768 768w`,
      `${processedSrc}?w=1024 1024w`,
      `${processedSrc}?w=1280 1280w`
    ].join(', ');
  }
  // Removed local WebP srcset generation to prevent 404s from non-existent variants
  // Local images should exist as single files, not responsive variants
}
---

<img 
  src={processedSrc} 
  alt={optimizedAlt}
  class={className}
  style={{
    ...(color === 'white' ? { filter: 'brightness(0) invert(1)' } : 
        color === 'black' ? { filter: 'brightness(0) invert(0)' } : 
        color && color.startsWith('#') && isSvgUrl(processedSrc) ? { 
          filter: `
            brightness(0) 
            drop-shadow(0 0 0 ${color}) 
            drop-shadow(0 0 0 ${color}) 
            drop-shadow(0 0 0 ${color})
          ` 
        } :
        color ? { filter: `brightness(0) saturate(100%) invert(0.5) sepia(1) saturate(3000%) hue-rotate(${getHueRotate(color)})` } : {})
  }}
  aria-hidden={decorative ? 'true' : undefined}
  role={decorative ? 'presentation' : undefined}
  loading={priority ? undefined : "lazy"}
  decoding="async"
  fetchpriority={priority ? "high" : "auto"}
  width={width}
  height={height}
  srcset={srcset || undefined}
  sizes={sizes || undefined}
  {...rest}
/>
