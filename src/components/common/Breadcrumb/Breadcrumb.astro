---
// Breadcrumb.astro - Component for showing navigation breadcrumbs
import { t, getLocale } from '../../../i18n/i18n';
import type { Locale } from '../../../i18n/i18n';
import './styles.css';

// Props for the component
interface Props {
  currentPath?: string; // Optional override for current path
  bgColor?: string; // Optional background color class
  textColor?: string; // Optional text color class
  hoverColor?: string; // Optional hover color class
}

const { 
  currentPath, 
  bgColor, 
  textColor = 'text-gray-500', 
  hoverColor = 'hover:text-gray-800' 
} = Astro.props;

// Convert Tailwind classes to actual colors for inline styles
let backgroundColor = 'transparent';
if (bgColor === 'bg-primary') backgroundColor = 'var(--color-primary)';
else if (bgColor === 'bg-secondary') backgroundColor = 'var(--color-secondary)';
else if (bgColor === 'bg-white') backgroundColor = 'white';
else if (bgColor === 'bg-gray-100') backgroundColor = '#f3f4f6';

// Convert text color classes to actual colors
let textColorValue = '#6b7280'; // Default gray-500
if (textColor === 'text-white') textColorValue = 'white';
else if (textColor === 'text-gray-600') textColorValue = '#4b5563';
else if (textColor === 'text-gray-500') textColorValue = '#6b7280';
else if (textColor === 'text-primary') textColorValue = 'var(--color-primary)';
else if (textColor === 'text-secondary') textColorValue = 'var(--color-secondary)';

// Convert hover color classes to actual colors
let hoverColorValue = '#1f2937'; // Default gray-800
if (hoverColor === 'hover:text-white') hoverColorValue = 'white';
else if (hoverColor === 'hover:text-gray-900') hoverColorValue = '#111827';
else if (hoverColor === 'hover:text-gray-800') hoverColorValue = '#1f2937';
else if (hoverColor === 'hover:text-primary') hoverColorValue = 'var(--color-primary)';
else if (hoverColor === 'hover:text-secondary') hoverColorValue = 'var(--color-secondary)';

// Get current locale
const currentLocale: Locale = getLocale();

// Get current path from Astro.url or from props
const pathname = currentPath || Astro.url.pathname;

// Extract locale from path
const localeMatch = pathname.match(/^\/([a-z]{2})\//); 
const pathLocale = localeMatch ? localeMatch[1] as Locale : currentLocale;

// Remove language prefix and trailing slash
const cleanPath = pathname.replace(new RegExp(`^/(${pathLocale})?/?`), '').replace(/\/$/, '');

// Split path into segments
const segments = cleanPath ? cleanPath.split('/') : [];

// Get section name (first segment)
const section = segments.length > 0 ? segments[0] : '';

// Get section title from translations - use the locale from the URL path
let sectionTitle = '';
if (section) {
  // First try to get the title from the common namespace
  sectionTitle = t(`meta.${section}.title`, { namespace: 'common', locale: pathLocale });
  
  // If not found, try the section-specific namespace (e.g., brands namespace for /brands)
  if (sectionTitle === `meta.${section}.title`) {
    sectionTitle = t('title', { namespace: section, locale: pathLocale });
  }
  
  // If still not found, use the section name with capitalization
  if (sectionTitle === 'title' || sectionTitle === `meta.${section}.title`) {
    sectionTitle = section.charAt(0).toUpperCase() + section.slice(1);
  }
}

// Home URL with locale
const homeUrl = `/`;

---

<nav class="breadcrumb-container pt-8 mt-[2rem]" style={`background-color: ${backgroundColor}; --breadcrumb-text-color: ${textColorValue}; --breadcrumb-hover-color: ${hoverColorValue};`} aria-label="Breadcrumb">
  <div class="breadcrumb-wrapper">
    <ol class="breadcrumb-list">
      <!-- Home link always present -->
      <li class="breadcrumb-item" style={`color: ${textColorValue};`}>
        <a href={homeUrl} class="breadcrumb-link home-link" style={`color: ${textColorValue};`} aria-label={t('meta.home.title', { namespace: 'common' })}>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="breadcrumb-home-icon">
            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
            <polyline points="9 22 9 12 15 12 15 22"></polyline>
          </svg>
        </a>
      </li>
      <!-- Current section if not home -->
      {section && (
        <li class="breadcrumb-item" style={`color: ${textColorValue};`}>
          <span class="breadcrumb-separator" aria-hidden="true">/</span>
          <a href={`/${pathLocale}/${section}`} class="breadcrumb-link" style={`color: ${textColorValue};`}>
            {(sectionTitle || section).toUpperCase()}
          </a>
        </li>
      )}
      
      <!-- Additional segments if present -->
      {segments.slice(1).map((segment, index) => {
        const path = segments.slice(0, index + 2).join('/');
        const segmentTitle = segment.replace(/-/g, ' ');
        return (
          <li class="breadcrumb-item" style={`color: ${textColorValue};`}>
            <span class="breadcrumb-separator" aria-hidden="true">/</span>
            <a 
              href={`/${currentLocale}/${path}`} 
              class={`breadcrumb-link ${index === segments.length - 2 ? 'current' : ''}`}
              style={`color: ${textColorValue};`}
            >
              {segmentTitle.toUpperCase()}
            </a>
          </li>
        );
      })}
    </ol>
  </div>
</nav>

<style>
  .breadcrumb-link:hover,
  .home-link:hover {
    color: var(--breadcrumb-hover-color);
  }
  .breadcrumb-item,
  .breadcrumb-link,
  .home-link {
    color: var(--breadcrumb-text-color);
  }
</style>

<script src="./script.js"></script>
