---
// src/components/Header.astro
import DesktopNavbar from '../DesktopNavbar/index.astro';
import MobileMenuButton from '../MobileMenuButton/index.astro';
import LocalizedImage from '../LazyImage.astro';
import MessageCarousel from '../MessageCarousel/index.astro';
import { t, type Locale } from '../../../i18n/i18n';
import { logos } from '../../../config/assets';
import { getHeaderColors } from '../../../config/headerColors';
import './styles.css';

export interface Props {
  currentLang: Locale;
  headerColors?: {
    backgroundColor?: string;
    textColor?: string;
  };
}

const { currentLang, headerColors } = Astro.props;

// Configuraciones
const logosData = logos;

// Obtener configuración de colores basada en la ruta actual
const { pathname } = Astro.url;
const headerColorConfig = getHeaderColors(pathname);

// Si se pasan colores de header específicos (por ejemplo, desde un producto), 
// crear una configuración personalizada
let customHeaderConfig = headerColorConfig;
let customStyles: { backgroundColor?: string; color?: string } = {};
if (headerColors) {
  customHeaderConfig = {
    ...headerColorConfig,
    // Mantener las clases base pero también usar estilos inline
    backgroundColor: headerColors.backgroundColor ? headerColors.backgroundColor : headerColorConfig.backgroundColor,
    textColor: headerColors.textColor ? headerColors.textColor : headerColorConfig.textColor,
  };
  
  // Crear estilos inline para los colores personalizados
  if (headerColors.backgroundColor) {
    customStyles.backgroundColor = headerColors.backgroundColor;
  }
  if (headerColors.textColor) {
    customStyles.color = headerColors.textColor;
  }
}

---

<header 
  id="site-header" 
  class={`relative w-full transition-all duration-300 font-sans flex flex-col ${customHeaderConfig.textColor}`} 
  style={'background-color: ' + (customStyles.backgroundColor || 'transparent') + '; color: ' + (customStyles.color || 'inherit')}
  data-header-config={JSON.stringify(customHeaderConfig)}
>
{headerColorConfig.showMessageCarousel && <MessageCarousel currentLang={currentLang} />}
  
  <!-- Banner superior azul claro con mensaje -->
  <!--{customHeaderConfig.showMessageCarousel && <MessageCarousel currentLang={currentLang} />}
  
  <!-- Navbar principal - ocupa el 100% del ancho -->
  <div 
    class={`w-full ${customHeaderConfig.backgroundColor}`}
    style={customStyles.backgroundColor ? `background-color: ${customStyles.backgroundColor}` : ''}
  >
    <!-- Navbar de Desktop -->
    <div class="hidden md:block">
      <DesktopNavbar currentLang={currentLang} headerColorConfig={customHeaderConfig} />
    </div>

    <!-- Navegación Móvil -->
    <nav 
      class={`mobile-nav md:hidden w-full py-2 px-4 flex justify-between items-center ${customHeaderConfig.backgroundColor}`}
      style={customStyles.backgroundColor ? `background-color: ${customStyles.backgroundColor}` : ''}
    >
      <!-- Logo para Móvil -->
      <div class="logo-container">
        <a href={`/${currentLang}/`} data-astro-reload class="flex-shrink-0">
          <LocalizedImage
            src={logosData.principal.url}
            alt={logosData.principal.alt || "Yummi Nuts Logo"}
            class="h-12 w-auto object-contain"
            loading="eager"
            width="100"
            height="40"
            priority={true}
          />
        </a>
      </div>
      
      <!-- Mobile Menu Button -->
      <div class="menu-button-container">
        <MobileMenuButton currentLang={currentLang} headerColorConfig={customHeaderConfig} />
      </div>
    </nav>
  </div>

</header>

<script>
// Función para controlar el comportamiento del header al hacer scroll en desktop
function initHeaderScrollBehavior() {
  const header = document.getElementById('site-header');
  
  function handleScroll() {
    if (!header || window.innerWidth < 768) return; // Solo aplicar en desktop (md y superior)
    
    // Obtener la configuración de colores del header
    const headerConfig = header.getAttribute('data-header-config');
    if (headerConfig) {
      const config = JSON.parse(headerConfig);
      
      // Mantener el fondo configurado en desktop
      header.classList.remove('bg-black', 'bg-opacity-90', 'backdrop-blur-md', 'bg-opacity-50', 'bg-transparent', 'bg-blue-900');
      header.classList.add(config.backgroundColor);
    }
  }
  
  window.addEventListener('scroll', handleScroll);
  window.addEventListener('resize', handleScroll);
  
  // Ejecutar una vez al cargar para establecer el estado inicial
  handleScroll();
}

// Ensure the script runs after the DOM is fully loaded
if (typeof window !== 'undefined') {
  if (document.readyState === 'loading') { // Still loading
    document.addEventListener('DOMContentLoaded', initHeaderScrollBehavior);
  } else { // `DOMContentLoaded` has already fired
    initHeaderScrollBehavior();
  }
}

// Reinicializar cuando Astro navega a una nueva página
document.addEventListener('astro:page-load', initHeaderScrollBehavior);
document.addEventListener('astro:after-swap', initHeaderScrollBehavior);
</script>
