---
// src/components/common/VideoSection/index.astro
interface Video {
  id: string;
  url: string;
  thumbnail?: string;
  title?: string;
}

interface Props {
  title: string;
  description: string;
  videos: Video[];
}

const { title, description, videos } = Astro.props;

// Extract YouTube video ID from URL for thumbnail generation
function getYouTubeId(url: string): string {
  const watchMatch = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
  const embedMatch = url.match(/(?:youtube\.com\/embed\/)([a-zA-Z0-9_-]+)/);
  return watchMatch ? watchMatch[1] : (embedMatch ? embedMatch[1] : '');
}

// Convert YouTube URL to embed format
function convertToEmbedUrl(url: string): string {
  const videoId = getYouTubeId(url);
  return videoId ? `https://www.youtube.com/embed/${videoId}` : url;
}
---

<section class="w-full bg-white py-16">
  <div class="box-border content-stretch flex gap-[20px] items-center px-[90px] py-0 relative w-full">
    <!-- Video Thumbnails Section -->
    <div class="content-stretch flex h-[569px] items-center justify-between relative shrink-0 w-[620px]">
      <div class="content-stretch flex flex-col gap-[14.394px] items-start relative shrink-0">
        <!-- Large Video Thumbnail -->
        {videos[0] && (
          <div class="h-[567.964px] relative shrink-0 w-[319.586px] cursor-pointer video-thumbnail group" 
               data-video-id={videos[0].id}
               data-video-url={videos[0].url}
               data-video-title={videos[0].title}>
            <div class="absolute h-[567.964px] left-0 top-0 w-[319.586px] rounded-lg overflow-hidden">
              <img 
                alt={videos[0].title || 'Health video'} 
                class="block max-w-none size-full object-cover group-hover:scale-105 transition-transform duration-300" 
                height="567.964" 
                src={videos[0].thumbnail || `https://img.youtube.com/vi/${getYouTubeId(videos[0].url)}/maxresdefault.jpg`}
                width="319.586"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-black/20 group-hover:bg-black/30 transition-all duration-300"></div>
            </div>
            <!-- Play Button -->
            <div class="absolute bg-[rgba(0,0,0,0.6)] backdrop-blur-sm box-border content-stretch flex gap-[13.84px] items-center justify-center left-[231.42px] p-[16.608px] rounded-full size-[67.817px] top-[31.37px] group-hover:bg-[rgba(0,0,0,0.8)] group-hover:scale-110 transition-all duration-300">
              <div class="relative shrink-0 size-[33.216px]">
                <svg class="size-full text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 6.82v10.36c0 .79.87 1.27 1.54.84l8.14-5.18a1 1 0 0 0 0-1.69L9.54 5.98A.998.998 0 0 0 8 6.82z"/>
                </svg>
              </div>
            </div>
          </div>
        )}
      </div>
      
      <!-- Small Video Thumbnails -->
      <div class="content-stretch flex flex-col h-[567.964px] items-start justify-between leading-[0] relative shrink-0 w-[274.664px]">
        {videos.slice(1, 3).map((video, index) => (
          <div class="grid-cols-[max-content] grid-rows-[max-content] inline-grid place-items-start relative shrink-0 cursor-pointer video-thumbnail group"
               data-video-id={video.id}
               data-video-url={video.url}
               data-video-title={video.title}>
            <div class="[grid-area:1_/_1] h-[275.475px] ml-0 mt-0 relative w-[274.664px] rounded-lg overflow-hidden">
              <img 
                alt={video.title || `Health video ${index + 2}`} 
                class="block max-w-none size-full object-cover group-hover:scale-105 transition-transform duration-300" 
                height="275.475" 
                src={video.thumbnail || `https://img.youtube.com/vi/${getYouTubeId(video.url)}/maxresdefault.jpg`}
                width="274.664"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-black/20 group-hover:bg-black/30 transition-all duration-300"></div>
            </div>
            <!-- Play Button -->
            <div class="[grid-area:1_/_1] bg-[rgba(0,0,0,0.6)] backdrop-blur-sm box-border content-stretch flex gap-[8.392px] h-[42.365px] items-center justify-center ml-[215.908px] mt-[27.755px] p-[10.07px] relative rounded-full w-[42.365px] group-hover:bg-[rgba(0,0,0,0.8)] group-hover:scale-110 transition-all duration-300">
              <div class="relative shrink-0 size-[20.14px]">
                <svg class="size-full text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 6.82v10.36c0 .79.87 1.27 1.54.84l8.14-5.18a1 1 0 0 0 0-1.69L9.54 5.98A.998.998 0 0 0 8 6.82z"/>
                </svg>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Title and Description Section -->
    <div class="basis-0 content-stretch flex flex-col gap-[50px] grow items-start justify-center leading-[0] min-h-px min-w-px not-italic relative shrink-0">
      <div class="font-bold relative shrink-0 text-black text-[55px] tracking-[-2px] w-full text-sans">
        <p class="leading-[65px]">{title}</p>
      </div>
      <div class="font-normal relative shrink-0 text-[25px] text-gray tracking-[5px] w-full">
        <p class="leading-[60px]">{description}</p>
      </div>
    </div>
  </div>
</section>

<!-- Video Modal -->
<div id="videoModal" class="fixed inset-0 items-center justify-center z-50 hidden">
  <div class="modal-backdrop fixed inset-0 bg-black bg-opacity-75"></div>
  <div class="bg-black rounded-lg max-w-5xl max-h-[90vh] mx-4 relative z-10 transform transition-all overflow-hidden">
    <!-- Close Button -->
    <button type="button" class="modal-close absolute top-4 right-4 z-20 text-white hover:text-gray-300 bg-black/50 rounded-full p-2">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <!-- Video Container -->
    <div class="relative" style="padding-bottom: 56.25%; /* 16:9 aspect ratio */ min-height: 400px;">
      <iframe 
        id="videoIframe"
        class="absolute inset-0 w-full h-full rounded-t-lg"
        src=""
        title="Video Player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen>
      </iframe>
    </div>
    
    <!-- Video Title -->
    <div class="p-4 bg-black">
      <h3 class="text-white text-xl font-semibold" id="videoTitle"></h3>
    </div>
  </div>
</div>

<script>
  function initVideoSection() {
    const modal = document.getElementById('videoModal');
    const iframe = document.getElementById('videoIframe') as HTMLIFrameElement;
    const videoTitle = document.getElementById('videoTitle');
    const closeButtons = document.querySelectorAll('.modal-close');
    const backdrop = document.querySelector('.modal-backdrop');
    const videoThumbnails = document.querySelectorAll('.video-thumbnail');
    
    if (!modal || !iframe) return;
    
    // Convert YouTube URL to embed format
    function convertToEmbedUrl(url: string): string {
      const watchMatch = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
      const embedMatch = url.match(/(?:youtube\.com\/embed\/)([a-zA-Z0-9_-]+)/);
      const videoId = watchMatch ? watchMatch[1] : (embedMatch ? embedMatch[1] : '');
      return videoId ? `https://www.youtube.com/embed/${videoId}` : url;
    }

    // Open video modal
    function openModal(videoUrl: string, title: string = '') {
      if (!modal) return;
      
      // Convert to embed URL if needed
      const embedUrl = convertToEmbedUrl(videoUrl);
      
      // Add autoplay parameter to URL
      const separator = embedUrl.includes('?') ? '&' : '?';
      iframe.src = embedUrl + separator + 'autoplay=1&rel=0';
      
      if (videoTitle) {
        videoTitle.textContent = title;
      }
      
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.classList.add('overflow-hidden');
    }
    
    // Close video modal
    function closeModal() {
      if (!modal) return;
      
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.classList.remove('overflow-hidden');
      iframe.src = ''; // Stop video playback
    }
    
    // Add click listeners to video thumbnails
    videoThumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', () => {
        const videoUrl = thumbnail.getAttribute('data-video-url');
        const title = thumbnail.getAttribute('data-video-title') || '';
        
        if (videoUrl) {
          openModal(videoUrl, title);
        }
      });
    });
    
    // Close on button click
    closeButtons.forEach(button => {
      button.addEventListener('click', closeModal);
    });
    
    // Close on backdrop click
    if (backdrop) {
      backdrop.addEventListener('click', closeModal);
    }
    
    // Close on ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });
  }
  
  // Initialize video section on page load
  document.addEventListener('DOMContentLoaded', initVideoSection);
  document.addEventListener('astro:page-load', initVideoSection);
</script>

<style>
  /* Custom styles for video section */
  .video-thumbnail {
    cursor: pointer;
  }
  
  .video-thumbnail img {
    transition: transform 0.3s ease;
  }
  
  .video-thumbnail:hover img {
    transform: scale(1.05);
  }
  
  /* Modal animation */
  #videoModal {
    backdrop-filter: blur(4px);
  }
  
  #videoModal > div:last-child {
    animation: fadeInScale 0.3s ease-out;
  }
  
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  /* Modal responsive adjustments */
  @media (max-width: 1024px) {
    #videoModal > div:nth-child(2) {
      max-width: 90vw;
      max-height: 85vh;
    }
  }
  
  @media (max-width: 768px) {
    #videoModal > div:nth-child(2) {
      max-width: 95vw;
      max-height: 80vh;
      margin: 1rem;
    }
    
    #videoModal .relative[style*="padding-bottom"] {
      min-height: 250px;
    }
  }

  /* Section responsive adjustments */
  @media (max-width: 768px) {
    .box-border {
      flex-direction: column;
      gap: 2rem;
      padding: 1rem 2rem;
    }
    
    .content-stretch:first-child {
      width: 100%;
      height: auto;
    }
    
    .basis-0 {
      width: 100%;
      text-align: center;
    }
    
    .text-\[55px\] {
      font-size: 2.5rem;
    }
    
    .text-\[25px\] {
      font-size: 1.25rem;
    }
  }
</style>
